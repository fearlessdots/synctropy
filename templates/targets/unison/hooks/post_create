#!/usr/bin/bash
set -e

#
## TARGET CONFIGURATION FILE
#

# Get crate configuration
crateName=$(cat ${CRATE_DIR}/config.json | jq -r '.name')
if ! [ $? = 0 ]; then
	${SYNCTROPY_UTILS} error "Failed to read/parse crate configuration file."
	exit 1
fi
crateDescription=$(cat ${CRATE_DIR}/config.json | jq -r '.description')
if ! [ $? = 0 ]; then
	${SYNCTROPY_UTILS} error "Failed to read/parse crate configuration file."
	exit 1
fi
crateProtocol=$(cat ${CRATE_DIR}/config.json | jq -r '.protocol')
if ! [ $? = 0 ]; then
	${SYNCTROPY_UTILS} error "Failed to read/parse crate configuration file."
	exit 1
fi
crateHost=$(cat ${CRATE_DIR}/config.json | jq -r '.host')
if ! [ $? = 0 ]; then
	${SYNCTROPY_UTILS} error "Failed to read/parse crate configuration file."
	exit 1
fi

# Get target configuration from user input
targetName=${TARGET_NAME}
targetDescription=$(gum input --prompt "> Target description -> " --cursor.mode "blink" --value "")
if [ $? -ne 0 ]; then
	${SYNCTROPY_UTILS} error "Failed to get user input"
	exit 1
fi
targetPrimaryDirectory=$(gum input --prompt "> Primary directory (e.g., local) -> " --cursor.mode "blink" --value "")
if [ $? -ne 0 ]; then
	${SYNCTROPY_UTILS} error "Failed to get user input"
	exit 1
fi
targetSecondaryDirectory=$(gum input --prompt "> Secondary directory (e.g., remote) -> " --cursor.mode "blink" --value "")
if [ $? -ne 0 ]; then
	${SYNCTROPY_UTILS} error "Failed to get user input"
	exit 1
fi

# Display configuration and ask for user confirmation
echo ""
echo "Crate configuration:"
echo ""
${SYNCTROPY_UTILS} hr '-' 0.45
echo "$($SYNCTROPY_UTILS msg '#58ff74' 'Name:') ${crateName}"
echo "$($SYNCTROPY_UTILS msg '#58ff74' 'Description:') ${crateDescription}"
echo "$($SYNCTROPY_UTILS msg '#58ff74' 'Protocol:') ${crateProtocol}"
echo "$($SYNCTROPY_UTILS msg '#58ff74' 'Host:') ${crateHost}"
${SYNCTROPY_UTILS} hr '-' 0.45
echo ""

echo ""
echo "Target configuration:"
echo ""
${SYNCTROPY_UTILS} hr '-' 0.45
echo "$($SYNCTROPY_UTILS msg '#58ff74' 'Name:') ${targetName}"
echo "$($SYNCTROPY_UTILS msg '#58ff74' 'Description:') ${targetDescription}"
echo "$($SYNCTROPY_UTILS msg '#58ff74' 'Primary directory:') ${targetPrimaryDirectory}"
echo "$($SYNCTROPY_UTILS msg '#58ff74' 'Secondary directory:') ${targetSecondaryDirectory}"
${SYNCTROPY_UTILS} hr '-' 0.45
echo ""

gum confirm "Write content to target configuration file?" || (${SYNCTROPY_UTILS} error "> Operation cancelled by the user" && exit 1)

# Create Unison directory
mkdir -p "${TARGET_DIR}/unison"

# Rename and move profile
mv ${TARGET_DIR}/default_unison.prf ${TARGET_DIR}/unison/${TARGET_NAME}.prf

# Replace default template with custom values provided by the user
sed -i \
	-e "s#\$LABEL#$targetDescription#g" \
	-e "s#\$PROTOCOL#$crateProtocol#g" \
	-e "s#\$HOST#$crateHost#g" \
	-e "s#\$PRIMARY_DIR#$targetPrimaryDirectory#g" \
	-e "s#\$SECONDARY_DIR#$targetSecondaryDirectory#g" \
	${TARGET_DIR}/unison/${TARGET_NAME}.prf

#
## PRIMARY DIRECTORY
#

if ! [ -d "${targetPrimaryDirectory}" ]
then
	${SYNCTROPY_UTILS} attention "Creating primary directory at ${targetPrimaryDirectory}"
	mkdir -p "${targetPrimaryDirectory}"
else
	${SYNCTROPY_UTILS} attention "Primary directory already found at ${targetPrimaryDirectory}"
fi

exit 0
